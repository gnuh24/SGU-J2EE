package com.sgu.backend.controllers;

import com.sgu.backend.apiresponse.ApiResponse;
import com.sgu.backend.dto.request.coach.CoachCreateForm;
import com.sgu.backend.dto.request.coach.CoachFilter;
import com.sgu.backend.dto.request.coach.CoachUpdateForm;
import com.sgu.backend.dto.response.coach.CoachResponseDTO;
import com.sgu.backend.dto.response.seat.SeatResponseDTO;
import com.sgu.backend.entities.Coach;
import com.sgu.backend.services.CoachService;
import com.sgu.backend.services.SeatService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/coaches")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
@Tag(name = "Coach API", description = "Qu·∫£n l√Ω th√¥ng tin xe kh√°ch")
public class CoachController {
		
		@Autowired
		private final CoachService coachService;
		
		@Autowired
		private final ModelMapper modelMapper;
		
		@Autowired
		private final SeatService seatService;
		
		/**
		 * üìå T·∫°o m·ªõi Coach
		 * @param form Th√¥ng tin xe kh√°ch c·∫ßn t·∫°o
		 * @return Th√¥ng tin xe kh√°ch ƒë√£ t·∫°o
		 */
		@Operation(summary = "T·∫°o xe kh√°ch m·ªõi", description = "T·∫°o m·ªõi m·ªôt xe kh√°ch v·ªõi th√¥ng tin ƒë∆∞·ª£c cung c·∫•p.")
		@PostMapping
		public ResponseEntity<ApiResponse<CoachResponseDTO>> createCoach(@RequestBody @Valid CoachCreateForm form) {
				Coach entity = coachService.create(form);
				CoachResponseDTO dto = modelMapper.map(entity, CoachResponseDTO.class);
				return ResponseEntity.ok(new ApiResponse<>(200, "T·∫°o coach th√†nh c√¥ng", dto));
		}
		
		/**
		 * üìå C·∫≠p nh·∫≠t th√¥ng tin Coach
		 * @param id ID c·ªßa xe kh√°ch c·∫ßn c·∫≠p nh·∫≠t
		 * @param form Th√¥ng tin c·∫≠p nh·∫≠t xe kh√°ch
		 * @return Th√¥ng tin xe kh√°ch sau khi c·∫≠p nh·∫≠t
		 */
		@Operation(summary = "C·∫≠p nh·∫≠t xe kh√°ch", description = "C·∫≠p nh·∫≠t th√¥ng tin xe kh√°ch d·ª±a tr√™n ID c·ªßa xe kh√°ch.")
		@PatchMapping("/{id}")
		public ResponseEntity<ApiResponse<CoachResponseDTO>> updateCoach(
				@Parameter(description = "ID c·ªßa xe kh√°ch c·∫ßn c·∫≠p nh·∫≠t") @PathVariable String id,
				@RequestBody @Valid CoachUpdateForm form) {
				
				Coach entity = coachService.update(id, form);
				CoachResponseDTO dto = modelMapper.map(entity, CoachResponseDTO.class);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "C·∫≠p nh·∫≠t coach th√†nh c√¥ng", dto));
		}
		
		/**
		 * üìå L·∫•y Coach theo ID
		 * @param id ID c·ªßa xe kh√°ch c·∫ßn l·∫•y th√¥ng tin
		 * @return Th√¥ng tin xe kh√°ch v√† danh s√°ch gh·∫ø c·ªßa xe
		 */
		@Operation(summary = "L·∫•y coach theo ID", description = "L·∫•y th√¥ng tin chi ti·∫øt c·ªßa xe kh√°ch v√† c√°c gh·∫ø c·ªßa xe kh√°ch.")
		@GetMapping("/{id}")
		public ResponseEntity<ApiResponse<CoachResponseDTO>> getCoachById(
				@Parameter(description = "ID c·ªßa xe kh√°ch c·∫ßn l·∫•y th√¥ng tin") @PathVariable String id) {
				CoachResponseDTO dto  = coachService.getById(id);
				List<SeatResponseDTO> seatResponseDTOS = seatService.getById(id);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y coach th√†nh c√¥ng", dto));
		}
		
		/**
		 * üìå L·ªçc danh s√°ch Coach
		 * @param pageable Tham s·ªë ph√¢n trang
		 * @param filter C√°c tham s·ªë l·ªçc (lo·∫°i, tr·∫°ng th√°i, s·ª©c ch·ª©a...)
		 * @return Danh s√°ch xe kh√°ch sau khi l·ªçc
		 */
		@Operation(summary = "L·ªçc danh s√°ch coach", description = "H·ªó tr·ª£ ph√¢n trang v√† l·ªçc theo c√°c ti√™u ch√≠ nh∆∞ type, status, capacity,...")
		@GetMapping
		public ResponseEntity<ApiResponse<Page<CoachResponseDTO>>> filterCoaches(
				@Parameter(description = "Tham s·ªë ph√¢n trang") Pageable pageable,
				@Parameter(description = "C√°c tham s·ªë l·ªçc cho xe kh√°ch") CoachFilter filter) {
				Page<CoachResponseDTO> result = coachService.filter(pageable, filter);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "L·ªçc danh s√°ch coach th√†nh c√¥ng", result));
		}
}

package com.sgu.backend.controllers;

import com.sgu.backend.apiresponse.ApiResponse;
import com.sgu.backend.dto.request.city.CityCreateForm;
import com.sgu.backend.dto.request.city.CityFilterForm;
import com.sgu.backend.dto.request.city.CityUpdateForm;
import com.sgu.backend.dto.response.city.CityResponseDTO;
import com.sgu.backend.entities.City;
import com.sgu.backend.services.CityService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(value = "/cities")
@CrossOrigin(origins = "*")
@Tag(name = "City API", description = "Qu·∫£n l√Ω th√¥ng tin th√†nh ph·ªë")
public class CityController {
		
		@Autowired
		private CityService cityService;
		
		@Autowired
		private ModelMapper modelMapper;
		
		/**
		 * üìå L·∫•y t·∫•t c·∫£ th√†nh ph·ªë kh√¥ng ph√¢n trang
		 * @return Danh s√°ch t·∫•t c·∫£ th√†nh ph·ªë
		 */
		@Operation(summary = "L·∫•y t·∫•t c·∫£ th√†nh ph·ªë kh√¥ng ph√¢n trang", description = "L·∫•y danh s√°ch th√†nh ph·ªë m√† kh√¥ng s·ª≠ d·ª•ng ph√¢n trang.")
		@GetMapping(value = "/no-paging")
		public ResponseEntity<ApiResponse<List<CityResponseDTO>>> getAllCityNoPaging() {
				List<City> cities = cityService.getAllCityNoPaging();
				List<CityResponseDTO> dtos = modelMapper.map(cities, new TypeToken<List<CityResponseDTO>>() {}.getType());
				return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y danh s√°ch th√†nh ph·ªë th√†nh c√¥ng", dtos));
		}
		
		/**
		 * üìå L·∫•y t·∫•t c·∫£ th√†nh ph·ªë c√≥ ph√¢n trang
		 * @param pageable Tham s·ªë ph√¢n trang
		 * @param form C√°c tham s·ªë l·ªçc th√†nh ph·ªë
		 * @return Danh s√°ch th√†nh ph·ªë theo trang
		 */
		@Operation(summary = "L·∫•y t·∫•t c·∫£ th√†nh ph·ªë c√≥ ph√¢n trang", description = "L·∫•y danh s√°ch th√†nh ph·ªë v·ªõi ph√¢n trang v√† c√°c tham s·ªë l·ªçc.")
		@GetMapping
		public ResponseEntity<ApiResponse<Page<CityResponseDTO>>> getAllCity(
				Pageable pageable,
				CityFilterForm form) {
				Page<City> entities = cityService.getAllCityByAdmin(pageable, form);
				List<CityResponseDTO> dtos = modelMapper.map(entities.getContent(), new TypeToken<List<CityResponseDTO>>() {}.getType());
				Page<CityResponseDTO> page = new PageImpl<>(dtos, pageable, entities.getTotalElements());
				
				return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y danh s√°ch th√†nh ph·ªë th√†nh c√¥ng", page));
		}
		
		/**
		 * üìå L·∫•y th√¥ng tin th√†nh ph·ªë theo ID
		 * @param cityId ID th√†nh ph·ªë c·∫ßn t√¨m
		 * @return Th√¥ng tin th√†nh ph·ªë
		 */
		@Operation(summary = "L·∫•y th√¥ng tin th√†nh ph·ªë theo ID", description = "L·∫•y th√¥ng tin chi ti·∫øt c·ªßa th√†nh ph·ªë d·ª±a tr√™n ID.")
		@GetMapping(value = "/{cityId}")
		public ResponseEntity<ApiResponse<CityResponseDTO>> getCityById(
				@Parameter(description = "ID c·ªßa th√†nh ph·ªë c·∫ßn l·∫•y th√¥ng tin", example = "cityId") @PathVariable String cityId) {
				City entity = cityService.getCityById(cityId);
				CityResponseDTO dto = modelMapper.map(entity, CityResponseDTO.class);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y th√†nh ph·ªë th√†nh c√¥ng", dto));
		}
		
		/**
		 * üìå T·∫°o m·ªõi m·ªôt th√†nh ph·ªë
		 * @param form Th√¥ng tin th√†nh ph·ªë m·ªõi
		 * @return Th√¥ng tin th√†nh ph·ªë ƒë√£ t·∫°o
		 */
		@Operation(summary = "T·∫°o m·ªõi th√†nh ph·ªë", description = "T·∫°o m·ªõi m·ªôt th√†nh ph·ªë v·ªõi th√¥ng tin ƒë∆∞·ª£c cung c·∫•p.")
		@PostMapping
		public ResponseEntity<ApiResponse<CityResponseDTO>> createCity(
				@RequestBody @Valid CityCreateForm form) {
				City entity = cityService.createCity(form);
				CityResponseDTO dto = modelMapper.map(entity, CityResponseDTO.class);
				
				return ResponseEntity.status(201).body(new ApiResponse<>(201, "T·∫°o th√†nh ph·ªë th√†nh c√¥ng", dto));
		}
		
		/**
		 * üìå C·∫≠p nh·∫≠t th√¥ng tin th√†nh ph·ªë
		 * @param cityId ID th√†nh ph·ªë c·∫ßn c·∫≠p nh·∫≠t
		 * @param form Th√¥ng tin c·∫≠p nh·∫≠t th√†nh ph·ªë
		 * @return Th√¥ng tin th√†nh ph·ªë sau khi c·∫≠p nh·∫≠t
		 */
		@Operation(summary = "C·∫≠p nh·∫≠t th√¥ng tin th√†nh ph·ªë", description = "C·∫≠p nh·∫≠t th√¥ng tin th√†nh ph·ªë d·ª±a tr√™n ID.")
		@PatchMapping(value = "/{cityId}")
		public ResponseEntity<ApiResponse<CityResponseDTO>> updateCity(
				@PathVariable String cityId,
				@RequestBody @Valid CityUpdateForm form) {
				City entity = cityService.updateCity(cityId, form);
				CityResponseDTO dto = modelMapper.map(entity, CityResponseDTO.class);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "C·∫≠p nh·∫≠t th√†nh ph·ªë th√†nh c√¥ng", dto));
		}
}

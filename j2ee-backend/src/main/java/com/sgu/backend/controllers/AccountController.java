package com.sgu.backend.controllers;

import com.sgu.backend.apiresponse.ApiResponse;
import com.sgu.backend.dto.request.account.AccountFilterForm;
import com.sgu.backend.dto.request.account.AccountUpdateRoleForm;
import com.sgu.backend.dto.request.account.AccountUpdateStatusForm;
import com.sgu.backend.dto.response.account.AccountResponseForAdmin;

import com.sgu.backend.entities.Account;
import com.sgu.backend.security.JwtTokenProvider;
import com.sgu.backend.services.AccountService;
import com.sgu.backend.services.OTPService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/accounts")
@CrossOrigin(origins = "*")
@Tag(name = "Account API", description = "Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng")
public class AccountController {
		
		@Autowired
		private ModelMapper modelMapper;
		
		@Autowired
		private AccountService accountService;
		
		@Autowired
		private OTPService otpService;
		
		@Autowired
		private JwtTokenProvider jwtTokenProvider;
		
//		/**
//		 * üìå L·∫•y th√¥ng tin t√†i kho·∫£n theo ID
//		 * @param id M√£ t√†i kho·∫£n
//		 * @return Th√¥ng tin t√†i kho·∫£n d∆∞·ªõi d·∫°ng DTO
//		 */
//		@Operation(summary = "L·∫•y th√¥ng tin t√†i kho·∫£n theo ID", description = "Tr·∫£ v·ªÅ chi ti·∫øt t√†i kho·∫£n d·ª±a tr√™n ID.")
//		@GetMapping("/{id}")
//		public ResponseEntity<ApiResponse<AccountResponseForUser>> getAccountById(
//				@Parameter(description = "ID t√†i kho·∫£n") @PathVariable String id) {
//
//				Account account = accountService.getAccountById(id);
//				AccountResponseForUser accountDTO = modelMapper.map(account, AccountResponseForUser.class);
//				return ResponseEntity.ok(new ApiResponse<>(200, "Account retrieved successfully", accountDTO));
//		}
		
		/**
		 * üìå L·∫•y danh s√°ch t√†i kho·∫£n v·ªõi ph√¢n trang v√† b·ªô l·ªçc
		 * @param pageable Ph√¢n trang d·ªØ li·ªáu
		 * @param filterForm B·ªô l·ªçc t√†i kho·∫£n
		 * @return Danh s√°ch t√†i kho·∫£n k√®m theo th√¥ng tin ph√¢n trang
		 */
		@Operation(summary = "L·∫•y danh s√°ch t√†i kho·∫£n", description = "Tr·∫£ v·ªÅ danh s√°ch t√†i kho·∫£n c√≥ h·ªó tr·ª£ ph√¢n trang v√† l·ªçc.")
		@GetMapping
		public ResponseEntity<ApiResponse<Page<AccountResponseForAdmin>>> getAllAccounts(
				@Parameter(description = "Th√¥ng tin ph√¢n trang") Pageable pageable,
				@Parameter(description = "B·ªô l·ªçc t√†i kho·∫£n") AccountFilterForm filterForm) {
				
				Page<Account> accounts = accountService.getAllAccounts(pageable, filterForm);
				Page<AccountResponseForAdmin> accountDTOs = accounts.map(account ->
						modelMapper.map(account, AccountResponseForAdmin.class));
				
				return ResponseEntity.ok(new ApiResponse<>(200, "Account list retrieved successfully", accountDTOs));
		}
		
		/**
		 * üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n
		 * @param accountId ID t√†i kho·∫£n c·∫ßn c·∫≠p nh·∫≠t
		 * @param form Tr·∫°ng th√°i m·ªõi
		 * @return Th√¥ng tin t√†i kho·∫£n sau khi c·∫≠p nh·∫≠t
		 */
		@Operation(summary = "C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n", description = "Cho ph√©p ADMIN c·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n.")
		@PatchMapping("/{accountId}/status")
		public ResponseEntity<ApiResponse<AccountResponseForAdmin>> updateAccountStatus(
				@Parameter(description = "ID t√†i kho·∫£n") @PathVariable String accountId,
				@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Form c·∫≠p nh·∫≠t tr·∫°ng th√°i")
				@RequestBody @Valid AccountUpdateStatusForm form) {
				
				Account updatedAccount = accountService.updateStatusOfAccount(accountId, form.getStatus());
				AccountResponseForAdmin responseDTO = modelMapper.map(updatedAccount, AccountResponseForAdmin.class);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n th√†nh c√¥ng", responseDTO));
		}
}

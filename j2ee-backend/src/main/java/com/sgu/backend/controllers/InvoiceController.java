package com.sgu.backend.controllers;

import com.sgu.backend.apiresponse.ApiResponse;
import com.sgu.backend.dto.request.invoice.InvoiceCreateForm;
import com.sgu.backend.dto.request.invoice.InvoiceCreateFormByAdmin;
import com.sgu.backend.dto.request.invoice.InvoiceFilter;
import com.sgu.backend.dto.request.invoice.InvoiceUpdateForm;
import com.sgu.backend.dto.response.invoice.InvoiceDetailResponseDTO;
import com.sgu.backend.dto.response.invoice.InvoiceResponseDTO;
import com.sgu.backend.entities.Invoice;
import com.sgu.backend.entities.Profile;
import com.sgu.backend.external.vnpay.VNPAYService;
import com.sgu.backend.services.InvoiceService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

/**
 * InvoiceController is responsible for handling all invoice-related requests.
 * This includes actions such as getting, creating, updating, and managing invoices.
 */
@RestController
@RequestMapping("/invoices")
@CrossOrigin(origins = "*")
@Tag(name = "Invoice API", description = "Qu·∫£n l√Ω ho√° ƒë∆°n")
public class InvoiceController {
		
		@Autowired
		private InvoiceService invoiceService;
		
		@Autowired
		private ModelMapper modelMapper;
		
		@Autowired
		private VNPAYService vnpayService;
		
		/**
		 * Get all invoices with pagination and optional filtering.
		 *
		 * @param pageable the pagination information
		 * @param filter   the filters applied to the list of invoices
		 * @return a paginated list of invoice response DTOs
		 */
		@Operation(summary = "L·∫•y danh s√°ch ho√° ƒë∆°n", description = "L·∫•y danh s√°ch ho√° ƒë∆°n c√≥ ph√¢n trang v√† b·ªô l·ªçc.")
		@GetMapping
		public ResponseEntity<ApiResponse<Page<InvoiceResponseDTO>>> getAll(Pageable pageable, InvoiceFilter filter) {
				return ResponseEntity.ok(new ApiResponse<>(200, "Danh s√°ch ho√° ƒë∆°n", invoiceService.getAll(pageable, filter)));
		}
		
		
		@Operation(summary = "L·∫•y danh s√°ch ho√° ƒë∆°n", description = "L·∫•y danh s√°ch ho√° ƒë∆°n c√≥ ph√¢n trang v√† b·ªô l·ªçc.")
		@GetMapping("profile/{profileId}")
		public ResponseEntity<ApiResponse<List<InvoiceResponseDTO>>> getAllByProfileId(@PathVariable String profileId) {
				List<Invoice> entities = invoiceService.getAllByProfileId(profileId);
				
				List<InvoiceResponseDTO> dtoList = entities.stream()
						.map(
								(invoice) -> (
										modelMapper.map(invoice, InvoiceResponseDTO.class)
								)
						)
						.collect(Collectors.toList());
				
				return ResponseEntity.ok(new ApiResponse<>(200, "Danh s√°ch ho√° ƒë∆°n", dtoList));
		}


		
		/**
		 * Get the details of a specific invoice by its ID.
		 *
		 * @param id the ID of the invoice
		 * @return the details of the invoice
		 */
		@Operation(summary = "L·∫•y ho√° ƒë∆°n theo ID", description = "L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ho√° ƒë∆°n theo ID.")
		@GetMapping("/{id}")
		public ResponseEntity<ApiResponse<InvoiceDetailResponseDTO>> getById(@PathVariable String id) {
				Invoice invoice = invoiceService.getById(id);
				InvoiceDetailResponseDTO invoiceDetailResponseDTO = modelMapper.map(invoice, InvoiceDetailResponseDTO.class);
				return ResponseEntity.ok(new ApiResponse<>(200, "Chi ti·∫øt ho√° ƒë∆°n", invoiceDetailResponseDTO));
		}
		
		/**
		 * Create a new invoice by a user.
		 *
		 * @param form the form data for creating the invoice
		 * @return the created invoice
		 */
		@Operation(summary = "T·∫°o ho√° ƒë∆°n b·ªüi ng∆∞·ªùi d√πng", description = "Ng∆∞·ªùi d√πng c√≥ th·ªÉ t·∫°o m·ªôt ho√° ƒë∆°n m·ªõi.")
		@PostMapping
		public ResponseEntity<ApiResponse<InvoiceResponseDTO>> createByUser(
				@RequestBody @Valid InvoiceCreateForm form,
				HttpServletRequest request)  {
				
				Invoice invoice = invoiceService.createByUser(form);
				InvoiceResponseDTO responseDTO = modelMapper.map(invoice, InvoiceResponseDTO.class);
				
				
				if (invoice.getPaymentMethod().equals(Invoice.PaymentMethod.VNPAY)){
						String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort();
						String vnpayUrl = vnpayService.createOrder(request,  invoice.getTotalAmount(), invoice.getId(), baseUrl);
						responseDTO.setUrl(vnpayUrl);
				}
				
				
				return ResponseEntity.ok(new ApiResponse<>(201, "T·∫°o ho√° ƒë∆°n th√†nh c√¥ng", responseDTO));
		}
		
		@GetMapping("/vnpay-payment-return")
		public InvoiceResponseDTO paymentCompleted(HttpServletRequest request, Model model) {
				int paymentStatus = vnpayService.orderReturn(request);
				
				// üîπ In t·∫•t c·∫£ tham s·ªë VNPAY g·ª≠i v·ªÅ
				System.err.println("===== Th√¥ng tin VNPAY tr·∫£ v·ªÅ =====");
				request.getParameterMap().forEach((key, value) ->
						System.err.println(key + " = " + String.join(", ", value))
				);
				
				// üîπ L·∫•y th√¥ng tin quan tr·ªçng
				String orderId = request.getParameter("vnp_OrderInfo"); // ‚úÖ ID ƒë∆°n h√†ng ch√≠nh x√°c
				String transactionId = request.getParameter("vnp_TransactionNo");  // M√£ giao d·ªãch
				String paymentTime = request.getParameter("vnp_PayDate");          // Th·ªùi gian thanh to√°n
				String responseCode = request.getParameter("vnp_ResponseCode");    // M√£ ph·∫£n h·ªìi
				String transactionStatus = request.getParameter("vnp_TransactionStatus"); // Tr·∫°ng th√°i giao d·ªãch
				
				// üîπ X√°c ƒë·ªãnh nguy√™n nh√¢n tr·∫°ng th√°i giao d·ªãch
				String paymentNote = vnpayService.getPaymentNote(responseCode, transactionStatus);
				
				// üîπ X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n
				Invoice.PaymentStatus paymentStatusEnum = vnpayService.getPaymentStatus(responseCode, transactionStatus);
//				InvoiceStatus.Status orderStatus = vnpayService.getInvoiceStatus(paymentStatusEnum);
				
				System.out.println("üîπ Transaction ID: " + transactionId);
				System.out.println("üîπ Payment Note: " + paymentNote);
				System.out.println("üîπ Payment Time: " + paymentTime);
				System.out.println("üîπ Payment Status: " + paymentStatusEnum);
				
				// üîπ G√°n gi√° tr·ªã v√†o `InvoiceVNPAYResponseUpdateForm`
				InvoiceUpdateForm orderVNPAYResponseUpdateForm = new InvoiceUpdateForm();
				orderVNPAYResponseUpdateForm.setTransactionId(transactionId);
				orderVNPAYResponseUpdateForm.setPaymentNote(paymentNote); // Ghi l·∫°i l√Ω do tr·∫°ng th√°i thanh to√°n
				orderVNPAYResponseUpdateForm.setPaymentTime(paymentTime);
				orderVNPAYResponseUpdateForm.setPaymentStatus(paymentStatusEnum); // C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
				
				// üîπ Ki·ªÉm tra th√¥ng tin ƒë√£ g√°n ƒë√∫ng ch∆∞a
				System.out.println("‚úÖ InvoiceVNPAYResponseUpdateForm: " + orderVNPAYResponseUpdateForm);
				Invoice order = invoiceService.update(orderId, orderVNPAYResponseUpdateForm);
				InvoiceResponseDTO dto = modelMapper.map(order, InvoiceResponseDTO.class);
				String url_FE = "http://localhost:4200/home";
				dto.setUrl(url_FE);
				return dto;
		}
		
//		/**
//		 * Update an existing invoice by its ID.
//		 *
//		 * @param id   the ID of the invoice to update
//		 * @param form the form data for updating the invoice
//		 * @return the updated invoice
//		 */
//		@Operation(summary = "C·∫≠p nh·∫≠t ho√° ƒë∆°n", description = "C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt ho√° ƒë∆°n ƒë√£ t·ªìn t·∫°i.")
//		@PutMapping("/{id}")
//		public ResponseEntity<ApiResponse<InvoiceResponseDTO>> update(@PathVariable String id, @RequestBody @Valid InvoiceUpdateForm form) {
//				return ResponseEntity.ok(new ApiResponse<>(200, "C·∫≠p nh·∫≠t ho√° ƒë∆°n th√†nh c√¥ng", invoiceService.update(id, form)));
//		}
//
		/**
		 * Create a new invoice by an admin, which includes creating a new profile.
		 * This endpoint is restricted to users with the ADMIN role.
		 *
		 * @param form the form data for creating the invoice as an admin
		 * @return the created invoice response
		 */
		@Operation(summary = "T·∫°o h√≥a ƒë∆°n t·ª´ Admin, bao g·ªìm c·∫£ t·∫°o profile m·ªõi", description = "Admin c√≥ th·ªÉ t·∫°o ho√° ƒë∆°n m·ªõi v√† bao g·ªìm t·∫°o profile cho ng∆∞·ªùi d√πng.")
		@PostMapping("/admin")
		@PreAuthorize("hasRole('ADMIN')")
		public ResponseEntity<ApiResponse<InvoiceResponseDTO>> createInvoiceByAdmin(
				@RequestBody @Valid InvoiceCreateFormByAdmin form) {
				InvoiceResponseDTO response = invoiceService.createInvoiceByAdmin(form);
				return ResponseEntity.ok(new ApiResponse<>(200, "T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng (Admin)", response));
		}
}

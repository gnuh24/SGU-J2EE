package com.sgu.backend.controllers;

import com.sgu.backend.apiresponse.ApiResponse;
import com.sgu.backend.dto.request.coach_station.CoachStationCreateForm;
import com.sgu.backend.dto.request.coach_station.CoachStationFilterForm;
import com.sgu.backend.dto.request.coach_station.CoachStationUpdateForm;
import com.sgu.backend.dto.response.coach_station.CoachStationResponseDTO;
import com.sgu.backend.entities.CoachStation;
import com.sgu.backend.services.CoachStationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(value = "/coach-stations")
@CrossOrigin(origins = "*")
@Tag(name = "Coach Station API", description = "Qu·∫£n l√Ω th√¥ng tin b·∫øn xe kh√°ch")
public class CoachStationController {
		
		@Autowired
		private CoachStationService coachStationService;
		
		@Autowired
		private ModelMapper modelMapper;
		
		/**
		 * üìå L·∫•y danh s√°ch b·∫øn xe
		 * @param pageable Tham s·ªë ph√¢n trang
		 * @param form Tham s·ªë l·ªçc (n·∫øu c√≥)
		 * @return Danh s√°ch b·∫øn xe
		 */
		@Operation(summary = "L·∫•y danh s√°ch b·∫øn xe", description = "L·∫•y danh s√°ch b·∫øn xe theo ph√¢n trang v√† c√°c tham s·ªë l·ªçc.")
		@GetMapping
		public ResponseEntity<ApiResponse<Page<CoachStationResponseDTO>>> getAllCoachStations(
				@Parameter(description = "Tham s·ªë ph√¢n trang") Pageable pageable,
				@Parameter(description = "C√°c tham s·ªë l·ªçc cho b·∫øn xe") CoachStationFilterForm form) {
				
				Page<CoachStation> entities = coachStationService.getAllCoachStationsByAdmin(pageable, form);
				List<CoachStationResponseDTO> dtos = modelMapper.map(entities.getContent(), new TypeToken<List<CoachStationResponseDTO>>() {}.getType());
				Page<CoachStationResponseDTO> page = new PageImpl<>(dtos, pageable, entities.getTotalElements());
				
				return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y danh s√°ch b·∫øn xe th√†nh c√¥ng", page));
		}
		
		/**
		 * üìå L·∫•y danh s√°ch b·∫øn xe theo th√†nh ph·ªë
		 * @param cityId ID c·ªßa th√†nh ph·ªë
		 * @return Danh s√°ch b·∫øn xe c·ªßa th√†nh ph·ªë
		 */
		@Operation(summary = "L·∫•y danh s√°ch b·∫øn xe theo th√†nh ph·ªë", description = "L·∫•y danh s√°ch b·∫øn xe theo th√†nh ph·ªë d·ª±a tr√™n cityId.")
		@GetMapping(value = "/city/{cityId}")
		public ResponseEntity<ApiResponse<List<CoachStationResponseDTO>>> getAllCoachStationsByCityId(
				@Parameter(description = "ID c·ªßa th√†nh ph·ªë") @PathVariable String cityId) {
				
				List<CoachStation> entities = coachStationService.getAllCoachStationByCityId(cityId);
				List<CoachStationResponseDTO> dtos = modelMapper.map(entities, new TypeToken<List<CoachStationResponseDTO>>() {}.getType());
				
				return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y danh s√°ch b·∫øn xe theo th√†nh ph·ªë th√†nh c√¥ng", dtos));
		}
		
		/**
		 * üìå L·∫•y th√¥ng tin b·∫øn xe theo ID
		 * @param coachStationId ID c·ªßa b·∫øn xe
		 * @return Th√¥ng tin chi ti·∫øt b·∫øn xe
		 */
		@Operation(summary = "L·∫•y th√¥ng tin b·∫øn xe theo ID", description = "L·∫•y th√¥ng tin chi ti·∫øt c·ªßa b·∫øn xe d·ª±a tr√™n coachStationId.")
		@GetMapping(value = "/{coachStationId}")
		public ResponseEntity<ApiResponse<CoachStationResponseDTO>> getCoachStationById(
				@Parameter(description = "ID c·ªßa b·∫øn xe c·∫ßn l·∫•y th√¥ng tin") @PathVariable String coachStationId) {
				
				CoachStation entity = coachStationService.getCoachStationById(coachStationId);
				CoachStationResponseDTO dto = modelMapper.map(entity, CoachStationResponseDTO.class);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "L·∫•y th√¥ng tin b·∫øn xe th√†nh c√¥ng", dto));
		}
		
		/**
		 * üìå T·∫°o m·ªõi m·ªôt b·∫øn xe
		 * @param form Th√¥ng tin b·∫øn xe c·∫ßn t·∫°o
		 * @return Th√¥ng tin b·∫øn xe sau khi t·∫°o
		 */
		@Operation(summary = "T·∫°o b·∫øn xe m·ªõi", description = "T·∫°o m·ªõi m·ªôt b·∫øn xe v·ªõi th√¥ng tin ƒë∆∞·ª£c cung c·∫•p.")
		@PostMapping
		public ResponseEntity<ApiResponse<CoachStationResponseDTO>> createCoachStation(
				@RequestBody @Valid CoachStationCreateForm form) {
				
				CoachStation entity = coachStationService.createCoachStation(form);
				CoachStationResponseDTO dto = modelMapper.map(entity, CoachStationResponseDTO.class);
				
				return ResponseEntity.status(201).body(new ApiResponse<>(201, "T·∫°o b·∫øn xe th√†nh c√¥ng", dto));
		}
		
		/**
		 * üìå C·∫≠p nh·∫≠t th√¥ng tin b·∫øn xe
		 * @param coachStationId ID c·ªßa b·∫øn xe c·∫ßn c·∫≠p nh·∫≠t
		 * @param form Th√¥ng tin c·∫≠p nh·∫≠t b·∫øn xe
		 * @return Th√¥ng tin b·∫øn xe sau khi c·∫≠p nh·∫≠t
		 */
		@Operation(summary = "C·∫≠p nh·∫≠t b·∫øn xe", description = "C·∫≠p nh·∫≠t th√¥ng tin b·∫øn xe d·ª±a tr√™n ID c·ªßa b·∫øn xe.")
		@PatchMapping(value = "/{coachStationId}")
		public ResponseEntity<ApiResponse<CoachStationResponseDTO>> updateCoachStation(
				@Parameter(description = "ID c·ªßa b·∫øn xe c·∫ßn c·∫≠p nh·∫≠t") @PathVariable String coachStationId,
				@RequestBody @Valid CoachStationUpdateForm form) {
				
				CoachStation entity = coachStationService.updateCoachStation(coachStationId, form);
				CoachStationResponseDTO dto = modelMapper.map(entity, CoachStationResponseDTO.class);
				
				return ResponseEntity.ok(new ApiResponse<>(200, "C·∫≠p nh·∫≠t b·∫øn xe th√†nh c√¥ng", dto));
		}
}
